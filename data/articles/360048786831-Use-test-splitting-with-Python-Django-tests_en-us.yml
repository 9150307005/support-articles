id: 360048786831
url: >-
  https://circleci.zendesk.com/api/v2/help_center/en-us/articles/360048786831.json
html_url: >-
  https://support.circleci.com/hc/en-us/articles/360048786831-Use-test-splitting-with-Python-Django-tests
author_id: 405652843914
comments_disabled: true
draft: false
promoted: false
position: 0
vote_sum: 1
vote_count: 1
section_id: 115003327068
created_at: '2020-08-26T16:02:32Z'
updated_at: '2020-10-22T06:56:27Z'
name: Use test splitting with Python Django tests
title: Use test splitting with Python Django tests
source_locale: en-us
locale: en-us
outdated: false
outdated_locales: []
edited_at: '2020-10-22T06:56:27Z'
user_segment_id: null
permission_group_id: 237867
label_names:
  - test timing
  - test split
  - test splitting
  - python
  - django
body: >-
  <p>To utilize <a href="https://circleci.com/docs/2.0/parallelism-faster-jobs/"
  target="_blank" rel="noopener">test splitting with CircleCI</a> we require
  that you pass in a list of tests to run. However, with how you execute tests
  with Django you are unable to simply <code>glob</code> the tests and pass them
  in.</p>

  <p>Someone shared the issues they ran into, and a solution, in the following
  Discuss post:</p>

  <p><a
  href="https://discuss.circleci.com/t/python-django-tests-not-being-split-correctly/36624">https://discuss.circleci.com/t/python-django-tests-not-being-split-correctly/36624</a></p>

  <p>Using the above, here is a quick example of how to accomplish test
  splitting:</p>

  <pre style="background-color: #f3f3f3;">- run:
      command: |
        # get test files while ignoring __init__ files
        TESTFILES=$(circleci tests glob "catalog/tests/*.py" | sed 's/\S\+__init__.py//g')
        echo $TESTFILES | tr ' ' '\n' | sort | uniq &gt; circleci_test_files.txt
        cat circleci_test_files.txt
        TESTFILES=$(circleci tests split --split-by=timings circleci_test_files.txt)
        # massage filepaths into format manage.py test accepts
        TESTFILES=$(echo $TESTFILES | tr "/" "." | sed 's/.py//g')
        echo $TESTFILES
        pipenv run python manage.py test --verbosity=2 $TESTFILES  </pre>
