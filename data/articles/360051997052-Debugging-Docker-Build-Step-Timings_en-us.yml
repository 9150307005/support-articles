id: 360051997052
url: >-
  https://circleci.zendesk.com/api/v2/help_center/en-us/articles/360051997052.json
html_url: >-
  https://support.circleci.com/hc/en-us/articles/360051997052-Debugging-Docker-Build-Step-Timings
author_id: 382351624233
comments_disabled: true
draft: false
promoted: false
position: 0
vote_sum: 1
vote_count: 1
section_id: 115003756627
created_at: '2020-11-11T21:19:46Z'
updated_at: '2020-12-10T23:34:26Z'
name: Debugging Docker Build Step Timings
title: Debugging Docker Build Step Timings
source_locale: en-us
locale: en-us
outdated: false
outdated_locales: []
edited_at: '2020-11-11T21:19:50Z'
user_segment_id: null
permission_group_id: 237847
label_names: []
body: >-
  <p>When building a Docker image, depending on how large your Dockerfile is, a
  lot of commands are run sequentially during the build process. If you are
  running these often, you may have an idea of the average build time and when
  the build time deviates from this it can be difficult to find where this time
  is being lost as Docker does not provide timing information in the output.</p>

  <p>This can be solved by piping the docker build output to bash line-by-line
  and pre-pending the time by using the date command:</p>

  <pre>- run: docker build . | while read line ; do echo "$(date +"%T") &gt;
  $line" ; done ;</pre>

  <p>This will provide and output along the following lines:</p>

  <pre class="css-1hjuxmj">21:15:46 &gt; Status: Downloaded newer image for
  cimg/base:2020.11

  21:15:46 &gt; ---&gt; 2b62242a26ae

  21:15:46 &gt; Step 2/14 : LABEL maintainer "CircleCI
  &lt;circleci@example.com&gt;"

  21:15:47 &gt; ---&gt; Running in b829a27594ae

  21:15:47 &gt; ---&gt; f0d09345055e

  21:15:47 &gt; Removing intermediate container b829a27594ae</pre>

  <p>The format of the timing data is in HH:MM:SS which provides granular
  information that will help in tracking down steps that are taking longer than
  expected.</p>
