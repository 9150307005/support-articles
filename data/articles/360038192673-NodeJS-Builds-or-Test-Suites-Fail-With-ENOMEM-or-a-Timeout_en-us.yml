id: 360038192673
url: >-
  https://circleci.zendesk.com/api/v2/help_center/en-us/articles/360038192673.json
html_url: >-
  https://support.circleci.com/hc/en-us/articles/360038192673-NodeJS-Builds-or-Test-Suites-Fail-With-ENOMEM-or-a-Timeout
author_id: 382351624233
comments_disabled: true
draft: false
promoted: false
position: 0
vote_sum: 14
vote_count: 16
section_id: 115003332147
created_at: '2019-10-31T10:25:36Z'
updated_at: '2020-12-03T22:08:21Z'
name: NodeJS Builds or Test Suites Fail With ENOMEM or a Timeout
title: NodeJS Builds or Test Suites Fail With ENOMEM or a Timeout
source_locale: en-us
locale: en-us
outdated: false
outdated_locales: []
edited_at: '2020-10-22T07:00:43Z'
user_segment_id: null
permission_group_id: 237867
label_names:
  - nodejs
  - timeout
  - Test Suites
  - ENOMEM
body: "<p>A common issue with running NodeJS test suites that spawn workers/threads in a Docker container is that these scripts will spawn too many workers/threads and cause excessive memory usage. In most cases this will cause jobs to fail with\_ENOMEM errors.</p>\n<p>This happens because the script\_looks at the number of CPUs available on the <em>physical</em> machine, which can be 32+ cores, rather than the number vCPUs the Docker container has been allocated.</p>\n<p>The number of workers/threads your test suites uses will need to be configured to not exceed the number of vCPUs allocated to the\_<a href=\"https://circleci.com/docs/2.0/configuration-reference/#resource_class\" target=\"_self\">resource class</a>\_in use (medium by default).</p>\n<p>For example, if using Jest, set the <a href=\"https://jestjs.io/docs/en/cli#maxworkers-num-string\" target=\"_self\">maxWorkers</a> option:</p>\n<pre><code>--maxWorkers=2</code></pre>"
