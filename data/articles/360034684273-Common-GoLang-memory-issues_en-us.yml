id: 360034684273
url: >-
  https://circleci.zendesk.com/api/v2/help_center/en-us/articles/360034684273.json
html_url: >-
  https://support.circleci.com/hc/en-us/articles/360034684273-Common-GoLang-memory-issues
author_id: 25261361207
comments_disabled: true
draft: false
promoted: false
position: 0
vote_sum: 3
vote_count: 5
section_id: 115003756627
created_at: '2019-08-21T10:23:13Z'
updated_at: '2020-10-22T06:57:55Z'
name: Common GoLang memory issues
title: Common GoLang memory issues
source_locale: en-us
locale: en-us
outdated: false
outdated_locales: []
edited_at: '2020-10-22T06:57:55Z'
user_segment_id: null
permission_group_id: 237867
label_names:
  - docker
  - config
  - config.yml
  - memory usage
  - memory
  - Go
body: "<p>When building\_<em><strong>Go</strong></em>\_projects<strong><em>\_</em></strong>on CircleCI using the Docker executor, memory issues can occur because:</p>\n<ul>\n<li>\n<strong><em> Go</em></strong> will try to optimize according to the number of cores reported on the system.</li>\n<li>The environment will report the number of cores on the VM rather than the available cores for the container.</li>\n</ul>\n<p>This can cause <em><strong>Go</strong></em> to spawn too many workers and use all the available memory.</p>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;\">You can\_control the maximum number of OS threads that are executing code simultaneously, by setting <a href=\"https://golang.org/pkg/runtime/#GOMAXPROCS\" target=\"_blank\" rel=\"noopener\">the <code class=\"highlighter-rouge\" style=\"font-size: 15px;\">GOMAXPROCS</code>\_variable</a> to the number of cores available to your job. </span></p>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;\">For example, if you're using the default resource class (medium) for Docker executor jobs (which has 2 cores available):</span></p>\n<pre>jobs:<br>\_ build:<br>\_ \_ docker:<br>\_ \_   - image: circleci/golang:1.12<br>\_ \_ environment:<br>\_ \_ \_ GOMAXPROCS: 2<br>\_ \_ steps:<br>\_ \_ \_ - run:</pre>\n<p>\_</p>\n<p>To learn more about how to\_<span>control the run-time behavior of Go programs, see the <a href=\"https://golang.org/pkg/runtime\" target=\"_blank\" rel=\"noopener\"><em><strong>GoLang</strong></em> documentation</a>.</span></p>"
