id: 360000376788
url: https://circleci.zendesk.com/api/v2/help_center/ja/articles/360000376788.json
html_url: https://support.circleci.com/hc/ja/articles/360000376788
author_id: 28200990948
comments_disabled: true
draft: false
promoted: false
position: 0
vote_sum: 0
vote_count: 6
section_id: 115003756627
created_at: '2018-02-15T19:56:24Z'
updated_at: '2020-10-22T07:10:38Z'
name: テスト分割のトラブルシューティング
title: テスト分割のトラブルシューティング
source_locale: en-us
locale: ja
outdated: false
outdated_locales: []
edited_at: '2020-10-22T07:03:16Z'
user_segment_id: null
permission_group_id: 237867
label_names:
  - '--split-by='
  - test timing
  - test split
  - test splitting
  - test meta data
  - timing data
body: "<p>並列コンテナ間にテストを分割すると、予期しない動作が発生する場合があります。これには多くの理由が存在します。 <a href=\"https://circleci.com/docs/2.0/parallelism-faster-jobs/\">テストの並列実行</a>の内容を十分に確認してください。</p>\n<p>\_</p>\n<p><strong>アーティファクトの保存</strong></p>\n<p><em><a href=\"https://circleci.com/docs/2.0/configuration-reference/#store_test_results\">store_test_results</a></em> ステップは、テストのタイミングが保存されたことを保証するものですが、これでデバッグが簡単になるわけではありません。 <em><a href=\"https://circleci.com/docs/2.0/configuration-reference/#store_test_results\">store_artifacts</a></em>\_を使用してテストをアップロードし、実行されるテストの数を視覚的に確認できます。</p>\n<p>\_</p>\n<p><strong>テスト結果のエコー</strong></p>\n<p>アーティファクトの保存と同様に、クリーンなテスト分割コマンドを実装し、テストデータをエコー出力する方法の例を、以下に示します。</p>\n<p><code>\nTESTFILES=$(circleci tests glob \"test/**_test.rb\" | circleci tests split --split-by=timings) <br>\necho ${TESTFILES}<br>\n# bundle exec rake knapsack_pro:minitest<br>\nbundle exec rspec --format progress \\<br>\n --format RspecJunitFormatter \\<br>\n -o test/reports/rspec.xml \\<br>\n -- ${TESTFILES}<br>\n</code></p>\n<p><a href=\"https://discuss.circleci.com/search?q=testfiles%3D%20category%3A48\"><span class=\"wysiwyg-font-size-small\">Discuss の例:\_https://discuss.circleci.com/search?q=testfiles%3D%20category%3A48</span></a></p>\n<p>\_</p>\n<p><strong>最も速度の遅いテストの検出</strong></p>\n<p>RSpec など一部のテストライブラリは、\"最も速度の遅いテスト\" を報告します。</p>\n<p><img src=\"https://support.circleci.com/hc/article_attachments/360000581627/mceclip0.png\" width=\"216\" height=\"103\"></p>\n<p>これらのテストを精査し、他のテストファイルと比較して長い時間を要するかどうかを確認することで、テストをより小さく、またはより効率的に行なえるようになります。</p>\n<p>\_</p>\n<p><strong>並列処理の変更</strong></p>\n<p>テストの作成方法によっては、並列処理の量を変更することでテストに大きな影響を与えることがあります。 また、繰り返し問題を引き起こしているテストはどれかを識別するためにも役立つことがあります。</p>\n<p><br><br><strong>タイミングの再同期</strong></p>\n<p>タイミングデータは、\"グリーン\" ビルドが成功したときに保存されます。 これらの結果はその後で、以前の数ビルドにわたって分析され、将来の分割のため使用されます。 これらの結果が偏っている、または他の理由で不正確な場合、問題を修正した後でも、ビルドのタイミングに影響を及ぼします。 問題が解決すると、以後の数ビルドにわたってタイミングデータが正規化され、予測される結果が得られるようになります。 この点を考慮し、数回のコミットをプッシュしてシステムをフラッシュします。 必要な場合、<em>$CIRCLE_INTERNAL_TASK_DATA/circle-test-results</em> でタイミングデータを確認できます。</p>\n<p>\_</p>\n<p><strong>可変長のテスト</strong></p>\n<p>テストが 1 つの場合もスイートの場合もあるので、完了時間は目的や他の多くの理由から大幅に異なります。 これは、UI または単体テストにおいて一般的です。 テストごとにタイミングが異なる場合、CircleCI の分割システムは有効なタイミングデータを判定できません。</p>\n<p>\_</p>\n<h2><strong>分散ライブラリの検討</strong></h2>\n<p>https://circleci.com/docs/2.0/parallelism-faster-jobs/#balancing-libraries</p>"
