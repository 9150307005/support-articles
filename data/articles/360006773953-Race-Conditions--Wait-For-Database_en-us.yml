id: 360006773953
url: >-
  https://circleci.zendesk.com/api/v2/help_center/en-us/articles/360006773953.json
html_url: >-
  https://support.circleci.com/hc/en-us/articles/360006773953-Race-Conditions-Wait-For-Database
author_id: 28200990948
comments_disabled: false
draft: false
promoted: false
position: 0
vote_sum: 2
vote_count: 18
section_id: 115003756627
created_at: '2018-07-09T13:33:34Z'
updated_at: '2021-01-12T01:48:37Z'
name: Race Conditions - Wait For Database
title: Race Conditions - Wait For Database
source_locale: en-us
locale: en-us
outdated: false
outdated_locales: []
edited_at: '2020-10-22T06:58:44Z'
user_segment_id: null
permission_group_id: 237867
label_names:
  - mysql
  - dockerize
  - wait
  - race condition
  - database
body: "<p>You may run into a situation where your app attempts to access the database before it is ready to accept connections, resulting in a failure. It this case it is necessary to wait for the database to come online fully before continuing.</p>\n<p>We suggest dockerize:\_<a href=\"https://github.com/jwilder/dockerize\" target=\"_blank\" rel=\"noopener\">https://github.com/jwilder/dockerize</a></p>\n<p>In this example PostgreSQL\_ is our database. Our first run step downloads the newest Dockerize binary and the next run step `Wait for db` waits on the port for our database until it receives a response, with a 1 minute timeout.</p>\n<pre><code>\nversion: 2.0<br>\njobs:<br>\n\_\_build:<br>\n\_\_\_\_docker:<br>\n\_\_\_\_\_\_- image: your/image_for_primary_container<br>\n\_\_\_\_\_\_- image: postgres:9.6.2-alpine<br>\n\_\_\_\_environment:<br>\n\_\_\_\_\_\_POSTGRES_USER: your_postgres_user<br>\n\_\_\_\_\_\_POSTGRES_DB: your_postgres_test<br>\n\_\_\_\_workDir: /your/workdir<br>\n\_\_\_\_steps:<br>\n\_\_\_\_\_\_- checkout<br>\n\_\_\_\_\_\_- run:<br>\n\_\_\_\_\_\_\_\_name: install dockerize<br>\n\_\_\_\_\_\_\_\_command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &amp;&amp; rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz<br>\n\_\_\_\_\_\_\_\_environment:<br>\n\_\_\_\_\_\_\_\_\_\_DOCKERIZE_VERSION: v0.3.0<br>\n\_\_\_\_\_\_- run:<br>\n\_\_\_\_\_\_\_\_name: Wait for db<br>\n\_\_\_\_\_\_\_\_command: dockerize -wait tcp://localhost:5432 -timeout 1m<br>\n</code></pre>\n<p>You can apply the same principle for MySQL:</p>\n<pre><code>dockerize -wait tcp://localhost:3306 -timeout 1m</code></pre>\n<p>Redis:</p>\n<pre><code>dockerize -wait tcp://localhost:6379 -timeout 1m</code></pre>\n<p>and other services such as web servers</p>\n<pre><code>dockerize -wait http://localhost:80 -timeout 1m</code></pre>"
